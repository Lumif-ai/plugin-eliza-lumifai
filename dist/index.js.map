{"version":3,"sources":["../src/clients/lumifaiClient.ts","../src/index.ts"],"sourcesContent":["import {\n  Client,\n  ClientInstance,\n  composeContext,\n  generateMessageResponse,\n  getEmbeddingZeroVector,\n  IAgentRuntime,\n  messageCompletionFooter,\n  ModelClass,\n  stringToUuid,\n  elizaLogger,\n} from \"@elizaos/core\";\nimport { pipeDataStreamToResponse } from \"ai\";\nimport fastify, { FastifyInstance } from \"fastify\";\nimport fs from \"fs\";\nimport {\n  createPublicClient,\n  createWalletClient,\n  http,\n  keccak256,\n  parseAbi,\n  stringToHex,\n  toBytes,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { Chain, goerli, hardhat, mainnet, sepolia } from \"viem/chains\";\n\nvar messageHandlerTemplate =\n  // {{goals}}\n  // \"# Action Examples\" is already included\n  `{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\n{{messageDirections}}\n\n{{recentMessages}}\n\n{{actions}}\n\n# Instructions: Write the next message for {{agentName}}.\n` + messageCompletionFooter;\n\ninterface LumifaiConfig {\n  privateKeyPath: string;\n  agentRegistrationContract: string;\n  agentId: string;\n  rpcUrl: string;\n  chain: string;\n}\n\nexport class LumifaiClientManager {\n  private publicClient;\n  private walletClient;\n  private accessToken: string | null = null;\n  private server: FastifyInstance;\n  private runtime: IAgentRuntime;\n\n  private readonly agentRegistrationAbi = parseAbi([\n    \"function getChallenge(string calldata _domain) external view returns (string memory)\",\n    \"function verifyAndRegister(string calldata _domain,string calldata _challenge,bytes calldata _signature) external returns (bool)\",\n    \"event AppAuthorized(string indexed domain,string uiDomain,string accessToken,uint256 expiration)\",\n  ]);\n\n  constructor() {\n    this.server = fastify({\n      logger: true,\n    });\n  }\n\n  private resolveChain(chainString: string): Chain {\n    const chainMap: { [key: string]: Chain } = {\n      mainnet: mainnet,\n      sepolia: sepolia,\n      goerli: goerli,\n      hardhat: hardhat,\n    };\n\n    const chain = chainMap[chainString.toLowerCase()];\n    if (!chain) {\n      throw new Error(\n        `Unsupported chain: ${chainString}. Supported chains are: ${Object.keys(chainMap).join(\", \")}`,\n      );\n    }\n\n    return chain;\n  }\n\n  private async getConfigFromRuntime(runtime: IAgentRuntime) {\n    const privateKeyPath = runtime.getSetting(\"LUMIFAI_PRIVATE_KEY_PATH\");\n    const agentRegistrationContract = runtime.getSetting(\n      \"LUMIFAI_AGENT_REGISTRATION_CONTRACT\",\n    );\n    const agentId = runtime.getSetting(\"LUMIFAI_AGENT_ID\");\n    const rpcUrl = runtime.getSetting(\"LUMIFAI_RPC_URL\");\n    const chain = runtime.getSetting(\"LUMIFAI_CHAIN\");\n\n    if (\n      !privateKeyPath ||\n      !agentRegistrationContract ||\n      !agentId ||\n      !rpcUrl ||\n      !chain\n    ) {\n      throw new Error(\"Missing required Lumifai configuration settings\");\n    }\n\n    return {\n      privateKeyPath,\n      agentRegistrationContract,\n      agentId,\n      rpcUrl,\n      chain,\n    };\n  }\n\n  private async setupServer() {\n    // Health check endpoint\n    this.server.get(\"/health\", async () => {\n      return { status: \"ok\" };\n    });\n\n    // Chat endpoint\n    this.server.post<{\n      Body: {\n        messages: Array<{\n          role: string;\n          content: Array<{\n            type: string;\n            text: string;\n          }>;\n        }>;\n        tools: Array<any>;\n        unstable_assistantMessageId: string;\n        runConfig: Record<string, any>;\n      };\n    }>(\"/api/chat\", {\n      schema: {\n        body: {\n          type: \"object\",\n          required: [\"messages\"],\n          properties: {\n            messages: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  role: { type: \"string\" },\n                  content: {\n                    type: \"array\",\n                    items: {\n                      type: \"object\",\n                      properties: {\n                        type: { type: \"string\" },\n                        text: { type: \"string\" },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            tools: { type: \"array\" },\n            unstable_assistantMessageId: { type: \"string\" },\n            runConfig: { type: \"object\" },\n          },\n        },\n      },\n      handler: async (request, reply) => {\n        try {\n          const lastMessage =\n            request.body.messages[request.body.messages.length - 1];\n          const prompt = lastMessage.content[0].text;\n\n          // Create message structure\n          const userId = stringToUuid(\"user-\" + Date.now());\n          const roomId = stringToUuid(\"room-\" + Date.now());\n\n          // Ensure connection\n          await this.runtime.ensureConnection(\n            userId,\n            roomId,\n            \"User\",\n            \"Chat User\",\n            \"direct\",\n          );\n\n          // Create message content\n          const content = {\n            text: prompt,\n            attachments: [],\n            source: \"direct\",\n            inReplyTo: undefined,\n          };\n\n          // Create user message\n          const userMessage = {\n            content,\n            userId,\n            roomId,\n            agentId: this.runtime.agentId,\n          };\n          const messageId = stringToUuid(Date.now().toString());\n          const memory = {\n            id: stringToUuid(messageId + \"-\" + userId),\n            ...userMessage,\n            agentId: this.runtime.agentId,\n            userId,\n            roomId,\n            content,\n            createdAt: Date.now(),\n          };\n          await this.runtime.messageManager.addEmbeddingToMemory(memory);\n          await this.runtime.messageManager.createMemory(memory);\n\n          // Compose state and generate response\n          let state = await this.runtime.composeState(userMessage, {\n            agentName: (this.runtime as any).character.name,\n          });\n\n          // Process message and get response\n          const context = composeContext({\n            state,\n            template: messageHandlerTemplate,\n          });\n          const response = await generateMessageResponse({\n            runtime: this.runtime,\n            context,\n            modelClass: ModelClass.LARGE,\n          });\n          // const response = await this.runtime.processMessage(\n          //   userMessage,\n          //   state,\n          // );\n          if (!response) {\n            reply.status(500).send(\"No response from generateMessageResponse\");\n            return;\n          }\n          const responseMessage = {\n            id: stringToUuid(messageId + \"-\" + this.runtime.agentId),\n            ...userMessage,\n            userId: this.runtime.agentId,\n            content: response,\n            embedding: getEmbeddingZeroVector(),\n            createdAt: Date.now(),\n          };\n          await this.runtime.messageManager.createMemory(responseMessage);\n          state = await this.runtime.updateRecentMessageState(state);\n          let message = null;\n          await this.runtime.processActions(\n            memory,\n            [responseMessage],\n            state,\n            async (newMessages) => {\n              message = newMessages;\n              return [memory];\n            },\n          );\n          await this.runtime.evaluate(memory, state);\n          const action = this.runtime.actions.find(\n            (a) => a.name === response.action,\n          );\n          try {\n            pipeDataStreamToResponse(reply.raw, {\n              status: 200,\n              statusText: \"OK\",\n              execute: async (dataStream) => {\n                if (response) {\n                  // Send final response\n                  dataStream.write(`0:${JSON.stringify(response.text)}\\n`);\n                }\n              },\n            });\n          } catch (error) {\n            elizaLogger.error(error);\n            reply.status(500).send({\n              error: \"Failed to process chat request\",\n              message: error instanceof Error ? error.message : \"Unknown error\",\n            });\n          }\n          // const shouldSuppressInitialMessage = action?.suppressInitialMessage;\n          // if (!shouldSuppressInitialMessage) {\n          //   if (message) {\n          //     return reply.send([response, message]);\n          //   } else {\n          //     return reply.send([response]);\n          //   }\n          // } else {\n          //   if (message) {\n          //     return reply.send([message]);\n          //   } else {\n          //     return reply.send([]);\n          //   }\n          // }\n        } catch (error) {\n          elizaLogger.error(\"Chat request failed:\", error);\n          reply.status(500).send({ error: \"Internal Server Error\" });\n        }\n      },\n    });\n\n    const port = parseInt(this.runtime.getSetting(\"SERVER_PORT\") || \"3000\");\n    await this.server.listen({ port });\n    console.log(`Server listening on port ${port}`);\n  }\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    try {\n      this.runtime = runtime;\n      const config = await this.getConfigFromRuntime(runtime);\n\n      // Setup blockchain clients\n      const chain = this.resolveChain(config.chain);\n      this.publicClient = createPublicClient({\n        transport: http(config.rpcUrl),\n        chain,\n      });\n\n      const privateKey = fs.readFileSync(config.privateKeyPath, \"utf8\").trim();\n      const account = privateKeyToAccount(privateKey as `0x${string}`);\n      this.walletClient = createWalletClient({\n        account,\n        transport: http(config.rpcUrl),\n        chain,\n      });\n\n      // Register agent\n      await this.registerAgent(config);\n      await this.setupEventListener(config);\n\n      // Setup server\n      await this.setupServer();\n    } catch (error) {\n      console.error(\"Initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  private async registerAgent(config: LumifaiConfig): Promise<void> {\n    try {\n      console.log(`Starting agent registration for ${config.agentId}`);\n\n      const challenge = await this.publicClient.readContract({\n        address: config.agentRegistrationContract as `0x${string}`,\n        abi: this.agentRegistrationAbi,\n        functionName: \"getChallenge\",\n        args: [config.agentId],\n      });\n      console.log(\"Received challenge:\", challenge);\n\n      const messageHash = keccak256(stringToHex(challenge as string));\n      const signature = await this.walletClient.signMessage({\n        message: {\n          raw: toBytes(messageHash),\n        },\n      });\n      console.log(\"Challenge signed successfully\");\n\n      const tx = await this.walletClient.writeContract({\n        address: config.agentRegistrationContract as `0x${string}`,\n        abi: this.agentRegistrationAbi,\n        functionName: \"verifyAndRegister\",\n        args: [config.agentId, challenge, signature],\n      });\n\n      console.log(\"Registration transaction submitted:\", tx);\n    } catch (error) {\n      console.error(\"Agent registration failed:\", error);\n      throw error;\n    }\n  }\n\n  private async setupEventListener(config: LumifaiConfig): Promise<void> {\n    try {\n      console.log(\"Setting up event listener for AppAuthorized event\");\n\n      this.publicClient.watchContractEvent({\n        address: config.agentRegistrationContract as `0x${string}`,\n        abi: this.agentRegistrationAbi,\n        eventName: \"AppAuthorized\",\n        onLogs: (logs) => {\n          for (const log of logs) {\n            const [agentId, , accessToken] = log.args as [\n              string,\n              string,\n              string,\n              bigint,\n            ];\n            if (agentId === config.agentId) {\n              this.accessToken = accessToken;\n              console.log(\n                `Agent registered successfully with access token: ${accessToken}`,\n              );\n            }\n          }\n        },\n      });\n    } catch (error) {\n      console.error(\"Failed to setup event listener:\", error);\n      throw error;\n    }\n  }\n\n  public getAccessToken(): string | null {\n    return this.accessToken;\n  }\n\n  public async cleanup(): Promise<void> {\n    await this.server.close();\n    console.log(\"Server closed and resources cleaned up\");\n  }\n}\n\nexport class LumifaiClient implements Client {\n  name = \"lumifai\";\n  private clientManager: LumifaiClientManager | null = null;\n\n  private getConfigFromRuntime(runtime: IAgentRuntime): LumifaiConfig {\n    const privateKeyPath = runtime.getSetting(\"LUMIFAI_PRIVATE_KEY_PATH\");\n    const agentRegistrationContract = runtime.getSetting(\n      \"LUMIFAI_AGENT_REGISTRATION_CONTRACT\",\n    );\n    const agentId = runtime.getSetting(\"LUMIFAI_AGENT_ID\");\n    const rpcUrl = runtime.getSetting(\"LUMIFAI_RPC_URL\");\n    const chain = runtime.getSetting(\"LUMIFAI_CHAIN\");\n\n    if (\n      !privateKeyPath ||\n      !agentRegistrationContract ||\n      !agentId ||\n      !rpcUrl ||\n      !chain\n    ) {\n      throw new Error(\"Missing required Lumifai configuration settings\");\n    }\n\n    return {\n      privateKeyPath,\n      agentRegistrationContract,\n      agentId,\n      rpcUrl,\n      chain,\n    };\n  }\n\n  async start(runtime: IAgentRuntime): Promise<ClientInstance> {\n    try {\n      const config = this.getConfigFromRuntime(runtime);\n      this.clientManager = new LumifaiClientManager();\n      // await this.clientManager.initialize(config);\n\n      return {\n        stop: async () => {},\n      };\n    } catch (error) {\n      console.error(\"Failed to start Lumifai client:\", error);\n      throw error;\n    }\n  }\n}\n","import {\n  Action,\n  AgentRuntime,\n  Character,\n  Client,\n  Evaluator,\n  Provider,\n  Service,\n  type Plugin,\n} from \"@elizaos/core\";\nimport { webSearch } from \"./actions/webSearch\";\nimport { WebSearchService } from \"./services/webSearchService\";\nimport { ActionFactory } from \"./actions/actionFactory\";\nimport { MCPClientService } from \"./services/mcpClientService\";\nimport { LumifaiClient, LumifaiClientManager } from \"./clients/lumifaiClient\";\n\nconst plugin = {\n  name: \"lumifaiPlugin\",\n  description: \"Connect to the Lumifai Network\",\n  actions: [],\n  evaluators: [],\n  providers: [],\n  services: [],\n  clients: [new LumifaiClient()],\n  adapters: [],\n};\n\n// class LumifaiPlugin implements Plugin {\n//   name: string;\n//   npmName?: string;\n//   config?: { [key: string]: any; };\n//   description: string;\n//   actions?: Action[];\n//   providers?: Provider[];\n//   evaluators?: Evaluator[];\n//   services?: Service[];\n//   clients?: Client[];\n//   adapters?: Adapter[];\n//   handlePostCharacterLoaded?: (char: Character) => Promise<Character>;\n//   async initialize(runtime: AgentRuntime) {\n\n//   }\n// }\n\nexport { LumifaiClientManager };\nexport default plugin;\n"],"mappings":"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","names":[]}